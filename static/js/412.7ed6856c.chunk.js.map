{"version":3,"file":"static/js/412.7ed6856c.chunk.js","mappings":"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","sources":["components/Cast/styled.js","components/CastItem/styled.js","components/CastItem/CastItem.jsx","components/Cast/Cast.jsx","components/services/Api/getFilms.js"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const CastList = styled.ul`\n  list-style: none;\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n  flex-wrap: wrap;\n`;\n\nexport const CastTitle = styled.h1`\n  color: white;\n`;\n\nexport const Box = styled.div`\nwidth: 100%;\nheight: 100%;\n`;","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  width: 200px;\n  border: 1px solid white;\n  border-radius: 4px;\n  margin: 20px;\n`;\n\nexport const PhotoAct = styled.img`\n  width: 200px;\n`;\n\nexport const CastLabel = styled.p`\n  padding: 0 10px;\n  color: white;\n`;","import PropTypes from 'prop-types';\nimport { contentURL } from 'components/services/Api/getFilms';\nimport { CastLabel, ListItem, PhotoAct } from './styled';\n\nexport const CastItem = ({ cast = {} }) => {\n    const { character, name, profile_path } = cast;\n    return (\n        <>\n            <ListItem>\n                <PhotoAct\n                    src={\n                        profile_path\n                            ? contentURL + profile_path\n                            : 'https://dummyimage.com/200x300/8c898c/ffffff.jpg&text=Photo+not+available'\n                    }\n                    alt={`photo ${name}`}\n                />\n                <CastLabel>{name}</CastLabel>\n                <CastLabel>{character}</CastLabel>\n            </ListItem>\n        </>\n    );\n};\n\nCastItem.propTypes = {\n    cast: PropTypes.shape({\n        character: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        profile_path: PropTypes.string,\n    }),\n};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, CastTitle, Box } from './styled';\nimport { getFilmCredits } from 'components/services/Api/getFilms';\nimport { CastItem } from 'components/CastItem/CastItem';\n\nconst Cast = () => {\n    const { id } = useParams();\n    const [casts, setCasts] = useState([]);\n\n    useEffect(() => {\n        async function getCast(id) {\n            try {\n                const { data } = await getFilmCredits(id);\n                setCasts(data.cast);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getCast(id);\n    }, [id]);\n    return (\n        <Box>\n            {!casts.length > 0 ? (\n                <CastTitle>No casts</CastTitle>\n            ) : (\n                <CastList>\n                    {casts.map(cast => (\n                        <CastItem key={cast.cast_id} cast={cast} />\n                    ))}\n                </CastList>\n            )}\n        </Box>\n    );\n};\n\nexport default Cast;\n","import axios from \"axios\";\n\nconst KEY = '915249618afd956764505d155ff11f97';\nconst LANGUAGE = 'uk';\n\nexport const contentURL = `https://image.tmdb.org/t/p/w500`;\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport async function getTrendFilms(page = 1) {\n    try {\n        const data = await instance.get(\n            `/trending/movie/week?api_key=${KEY}&page=${page}&language=${LANGUAGE}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport async function getFindFilm(searchQ, page = 1) {\n    try {\n        const data = await instance.get(\n            `/search/movie?api_key=${KEY}&query=${searchQ}&page=${page}&language=${LANGUAGE}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport async function getFilmInfo(idFilm) {\n    try {\n        const data = await instance.get(\n            `/movie/${idFilm}?api_key=${KEY}&language=${LANGUAGE}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error)\n    }\n};\n\nexport async function getFilmCredits(idFilm) {\n    try {\n        const data = await instance.get(\n            `/movie/${idFilm}/credits?api_key=${KEY}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport async function getFilmReviews(idFilm) {\n    try {\n        const data = await instance.get(\n            `/movie/${idFilm}/reviews?api_key=${KEY}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n}"],"names":["CastList","styled","CastTitle","Box","ListItem","PhotoAct","CastLabel","CastItem","cast","character","name","profile_path","src","contentURL","alt","id","useParams","useState","casts","setCasts","useEffect","getFilmCredits","data","console","log","getCast","length","map","cast_id","KEY","LANGUAGE","instance","axios","baseURL","getTrendFilms","page","get","status","Error","statusText","getFindFilm","searchQ","getFilmInfo","idFilm","getFilmReviews"],"sourceRoot":""}