{"version":3,"file":"static/js/622.6c9ed9a1.chunk.js","mappings":"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","sources":["components/ReviewsItem/styled.js","components/ReviewsItem/RewiewsItem.jsx","components/Reviews/styled.js","components/Reviews/Reviews.jsx","components/services/Api/getFilms.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  padding: 10px;\n`;\n\nexport const ReviewText = styled.p`\n  color: white;\n`;\n\nexport const TextName = styled.p`\n  color: black;\n`;\n\nexport const TextWrap = styled.span`\n  color: black;\n`;\n\nexport const RatingText = styled.p`\n  color: black;\n  font-weight: 500;\n`;","import PropTypes from 'prop-types';\n\nimport {\n    ListItem,\n    RatingText,\n    ReviewText,\n    TextName,\n    TextWrap,\n} from './styled';\n\nexport const ReviewsItem = ({ review = {} }) => {\n    const { author, content, rating, created_at } = review;\n    return (\n        <ListItem>\n            <TextName> Author: {author}</TextName>\n            <ReviewText>\n                <TextWrap>Review:</TextWrap> {content}\n            </ReviewText>\n            <RatingText>Rating: {rating ? rating : 'N/A'}</RatingText>\n            <RatingText>\n                Date: {new Date(created_at).toLocaleDateString('en-US')}\n            </RatingText>\n        </ListItem>\n    );\n};\n\nReviewsItem.propTypes = {\n    review: PropTypes.shape({\n        author: PropTypes.string.isRequired,\n        content: PropTypes.string.isRequired,\n        rating: PropTypes.number,\n        created_at: PropTypes.string.isRequired,\n    }),\n};","import styled from '@emotion/styled';\n\nexport const ListReviews = styled.ul`\n  padding-left: 25px;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  list-style: none;\n`;\n\nexport const TitleReviews = styled.h1`\n  color: white;\n`;","import { ReviewsItem } from '../ReviewsItem/RewiewsItem';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from '../services/Api/getFilms';\nimport { ListReviews, TitleReviews } from './styled';\n\nconst Reviews = () => {\n    const { id } = useParams();\n    const [reviews, setReviews] = useState([]);\n\n    useEffect(() => {\n        async function getReviews(id) {\n            try {\n                const { data } = await getFilmReviews(id);\n                setReviews(data.results);\n            } catch (error) {\n                console.log(error);\n            }\n        }\n        getReviews(id);\n    }, [id]);\n\n    return (\n        <>\n            {!reviews.length > 0 ? (\n                <TitleReviews>No reviews</TitleReviews>\n            ) : (\n                <ListReviews>\n                    <TitleReviews>Users reviews</TitleReviews>\n                    {reviews.map(review => (\n                        <ReviewsItem key={review.id} review={review} />\n                    ))}\n                </ListReviews>\n            )}\n        </>\n    );\n};\n\nexport default Reviews;","import axios from \"axios\";\n\nconst KEY = '915249618afd956764505d155ff11f97';\nconst LANGUAGE = 'uk';\n\nexport const contentURL = `https://image.tmdb.org/t/p/w500`;\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport async function getTrendFilms(page = 1) {\n    try {\n        const data = await instance.get(\n            `/trending/movie/week?api_key=${KEY}&page=${page}&language=${LANGUAGE}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport async function getFindFilm(searchQ, page = 1) {\n    try {\n        const data = await instance.get(\n            `/search/movie?api_key=${KEY}&query=${searchQ}&page=${page}&language=${LANGUAGE}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport async function getFilmInfo(idFilm) {\n    try {\n        const data = await instance.get(\n            `/movie/${idFilm}?api_key=${KEY}&language=${LANGUAGE}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error)\n    }\n};\n\nexport async function getFilmCredits(idFilm) {\n    try {\n        const data = await instance.get(\n            `/movie/${idFilm}/credits?api_key=${KEY}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport async function getFilmReviews(idFilm) {\n    try {\n        const data = await instance.get(\n            `/movie/${idFilm}/reviews?api_key=${KEY}`\n        );\n        if (data.status === 200) return data;\n        throw new Error(data.statusText);\n    } catch (error) {\n        console.log(error);\n    }\n}"],"names":["ListItem","styled","ReviewText","TextName","TextWrap","RatingText","ReviewsItem","review","author","content","rating","created_at","Date","toLocaleDateString","ListReviews","TitleReviews","id","useParams","useState","reviews","setReviews","useEffect","getFilmReviews","data","results","console","log","getReviews","length","map","KEY","LANGUAGE","contentURL","instance","axios","baseURL","getTrendFilms","page","get","status","Error","statusText","getFindFilm","searchQ","getFilmInfo","idFilm","getFilmCredits"],"sourceRoot":""}